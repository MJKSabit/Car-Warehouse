status = warn

# From any class call the static function : org.apache.logging.log4j.Logger = org.apache.logging.log4j.LogManager.getLogger(ClassName.class) | getRootLogger()
# To log, logger.[debug|info|warning|error|fatal][("Message")|("Message {} : {}", arg1, arg2)]

# Appender : Where to Log?

# Pattern Basics,
# %-5level : Level Name, 5 alignment
# %d : Date/Time {} to format
# %t : Thread Name
# %c{1} : Class Name, upto package level 1
# %msg : Log Message

# Console Print Settings
appender.console.type = Console
appender.console.name = LogToConsole
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

#appender.file.type = File
#appender.file.name = LogToFile
#appender.file.fileName=logs/app.log
#appender.file.layout.type=PatternLayout
#appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

# Rotate log file
appender.rolling.type = RollingFile
appender.rolling.name = LogToRollingFile
# Where to Save Log File
appender.rolling.fileName = logs/app.log
# If More than 1 file needed, Where to store previous Log
appender.rolling.filePattern = logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz
appender.rolling.layout.type = PatternLayout
# Log Message Print Pattern
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
# Maximum Log File Size
appender.rolling.policies.size.size=10MB
appender.rolling.strategy.type = DefaultRolloverStrategy
# Days to Keep the log file
appender.rolling.strategy.max = 10

## CUSTOM CONFIG HERE : MOST OF THE TIME :: CHANGE HERE
## Package Name or App Name
logger.app.name = sample
# Set Log Level Here : all | debug | info | warn | error | fatal | off
logger.app.level = debug
logger.app.additivity = false
# Log in Rolling File
logger.app.appenderRef.rolling.ref = LogToRollingFile
logger.app.appenderRef.console.ref = LogToConsole

# Root Logger Level
rootLogger.level = debug
rootLogger.appenderRef.stdout.ref = LogToConsole